name: Populate City Info - Council Members

# Number of cities to process in each workflow run
env:
  PIPELINE_RAILS_KEY: ${{ secrets.PIPELINE_RAILS_KEY }}
  RAILS_ENV: pipeline

on:
  workflow_dispatch:
    inputs:
      state:
        description: 'Pick a state to pick up new cities for processing'
        type: choice
        required: true
        options:
          - wa
      num_cities:
        description: 'Number of cities to process'
        type: number
        required: true
        default: 2

jobs:
  get_cities_from_queue:
    runs-on: ubuntu-latest
    outputs:
      cities: ${{ steps.set-cities.outputs.cities }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Decrypt Rails credentials
        run: |
          mkdir -p config/credentials
          echo "$PIPELINE_RAILS_KEY" > config/credentials/pipeline.key

      - name: Read cities from queue
        id: set-cities
        run: |
          # Load the cities queue file and take the first N cities
          # where "last_city_info_council_members_run" has not been filled out
          # ignore cities that already have PRs open
          cities_to_ignore=$(gh pr list --state open --json headRefName --search "head:pipeline-city-changes-${{ github.event.inputs.state }}-" --template '{{range .}}{{.headRefName}} {{end}}')

          city_names_to_ignore=$(echo $cities_to_ignore | sed -E 's/pipeline-city-changes-[^-]+-([^-]+)-[0-9]+/\1/g')

          cities=$(bundle exec rake "city_info:pick_cities[${{ github.event.inputs.state }},${{ github.event.inputs.num_cities }}, $city_names_to_ignore]") 

          # Echo comma-separated list to JSON array for github output
          cities_json=$(echo "$cities" | jq -R -s -c 'split(",") | map( .| gsub("\\s+"; "") )')
          echo "cities=$cities_json" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  populate_city_info:
    permissions:
      contents: write
      pull-requests: write
    needs: get_cities_from_queue
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        city: ${{ fromJson(needs.get_cities_from_queue.outputs.cities) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Set up git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"


      - name: Create a new branch for changes
        run: |
          # Generate a unique branch name for this run
          BRANCH_NAME="pipeline-city-changes-${{ github.event.inputs.state }}-${{ matrix.city }}-${{ github.run_id }}"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV  # Store the branch name as an environment variable
          git checkout -b $BRANCH_NAME
      
      - name: Decrypt Rails credentials
        run: |
          mkdir -p config/credentials
          echo "$RAILS_PIPELINE_KEY" > config/credentials/pipeline.key
      
      - name: Get city council member data
        run: |
          echo "Processing city: ${{ matrix.city }}, State: ${{ github.event.inputs.state }}"
          bundle exec rake 'city_info:fetch[${{ github.event.inputs.state }},${{ matrix.city }}]'

      - name: Commit council member changes
        run: |
          git add .
          git commit -m "Populate city info -- council members -- for ${{ matrix.city }}, ${{ github.event.inputs.state }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # TODO: only need this if the city is further split into districts
      #- name: Get city division map data
      #  run: |
      #    echo "Processing city: ${{ matrix.city }}, State: ${{ github.event.inputs.state }}"
      #    bundle exec rake 'city_info:find_division_map[${{ github.event.inputs.state }},${{ matrix.city }}]'

      #- name: Commit division map changes
      #  run: |
      #    git add .
      #    git commit -m "Populate city info -- division map -- for ${{ matrix.city }}, ${{ github.event.inputs.state }}"
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Open a pull request
        run: |
          git push --set-upstream origin ${{ env.BRANCH_NAME }}
          gh pr create \
            --base main \
            --head ${{ env.BRANCH_NAME }} \
            --title "Populate city info for ${{ matrix.city }}, ${{ github.event.inputs.state }}" \
            --body "Populate city info via github actions pipeline."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
